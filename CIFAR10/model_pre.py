#!/usr/bin/env python

"""
The main file for pre-training models to predict

"""

import sys


import time
import numpy as np
import scipy.io as sio
import matplotlib.pyplot as plt
from pylab import *

# keras
from keras.models import Model, Sequential, model_from_json
from keras.layers import Input, Dense
import keras.optimizers

from keras.datasets import mnist
from keras.utils import np_utils

# for training cifar10
from keras.preprocessing.image import ImageDataGenerator


import cifar_nn as NN

# training the model from data
# or read the model from saved data file
# then start analyse the model

whichMode = "train"
 
def model_pre():
    
    # construct model

    if whichMode == "train":

        (X_train,Y_train,X_test,Y_test, img_channels, img_rows, img_cols, batch_size, nb_classes, nb_epoch, data_augmentation) = NN.read_dataset()
           
        X_train = X_train.astype('float32')
        X_test = X_test.astype('float32')
        X_train /= 255
        X_test /= 255
        
        print ('Building network model ......')
        model_p = NN.build_model(img_channels, img_rows, img_cols, nb_classes)

        start_time = time.time()
        if not data_augmentation:
            print('Not using data augmentation.')
            model_p.fit(X_train, Y_train,
                      batch_size=batch_size,
                      nb_epoch=nb_epoch,
                      validation_data=(X_test, Y_test),
                      shuffle=True)
        else:
            print('Using real-time data augmentation.')
            print (X_train.shape[0])

            # this will do preprocessing and realtime data augmentation
            datagen = ImageDataGenerator(
                featurewise_center=False,  # set input mean to 0 over the dataset
                samplewise_center=False,  # set each sample mean to 0
                featurewise_std_normalization=False,  # divide inputs by std of the dataset
                samplewise_std_normalization=False,  # divide each input by its std
                zca_whitening=False,  # apply ZCA whitening
                rotation_range=0,  # randomly rotate images in the range (degrees, 0 to 180)
                width_shift_range=0.1,  # randomly shift images horizontally (fraction of total width)
                height_shift_range=0.1,  # randomly shift images vertically (fraction of total height)
                horizontal_flip=True,  # randomly flip images
                vertical_flip=False)  # randomly flip images

            # compute quantities required for featurewise normalization
            # (std, mean, and principal components if ZCA whitening is applied)
            datagen.fit(X_train)

            # fit the model on the batches generated by datagen.flow()
            model_p.fit_generator(datagen.flow(X_train, Y_train,
                                batch_size=batch_size),
                                samples_per_epoch=X_train.shape[0],
                                nb_epoch=nb_epoch,
                                validation_data=(X_test, Y_test))
                                
        score = model_p.evaluate(X_test, Y_test, verbose=0)
        print('Test score:%s'%score)
        print("Fitting time: --- %s seconds ---" % (time.time() - start_time))   
        print("Training finished!")

 
    return (model_p)



        
"""
   validate the model by the test data from the package
""" 
def test(model):

    (X_train, y_train), (X_test, y_test) = mnist.load_data()
    X_test = X_test.reshape(X_test.shape[0], 1, img_rows, img_cols)
    X_test = X_test.astype('float32')
    X_test = X_test.astype('float32')
    X_test /= 255

    Y_test = np_utils.to_categorical(y_test, nb_classes)

    print("Start testing model ... ")
    # prediction after training
    start_time = time.time()
    y_predicted = model.predict(X_test)
    print (y_predicted)

    print("Testing time: --- %s seconds ---" % (time.time() - start_time))

